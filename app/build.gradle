apply plugin: 'com.android.application'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 3
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "net.cryptodirect.authenticator"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}+" +
                String.format("%03d", versionBuild);
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    signingConfigs {
        release {
            // We can leave these in environment variables
            storeFile file('C:/key/android/cryptodash.jks')
            keyAlias 'cryptodash'

            // These two lines make gradle believe that the signingConfigs
            // section is complete. Without them, tasks like installRelease
            // will not be available!
            storePassword "notYourRealPassword"
            keyPassword "notYourRealPassword"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'com.android.support:support-v13:23.1.0'
    compile 'me.dm7.barcodescanner:zxing:1.8.3'
    compile 'ch.acra:acra:4.7.0-RC.1'
    compile 'me.grantland:autofittextview:0.2.1'
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.9.5"
}

task askForPasswords << {
    // Must create String because System.readPassword() returns char[]
    // (and assigning that below fails silently)
    def storePw = new String(System.console().readPassword("Keystore password: "))
    def keyPw  = new String(System.console().readPassword("Key password: "))

    android.signingConfigs.release.storePassword = storePw
    android.signingConfigs.release.keyPassword = keyPw
}

def replacePatternInFile(file, Closure replaceText) {
    file.write(replaceText(file.text))
}

task writeVersionToAboutFile << {
    def file = new File('.\\app\\src\\main\\assets\\about.html')
    def patternToFind = ~/Version \d.\d.\d+\d\d\d/
    def replacePatternWith = 'Version ' + versionMajor + "." + versionMinor + "." + versionPatch +
            "-" + String.format("%03d", versionBuild);

//Call the method
    replacePatternInFile(file){
        it.replaceAll(patternToFind, replacePatternWith)
    }

}

askForPasswords.mustRunAfter writeVersionToAboutFile

tasks.whenTaskAdded { theTask ->
    if (theTask.name.equals("packageRelease") || theTask.name.equals("assembleRelease")) {
        theTask.dependsOn "askForPasswords"
        theTask.dependsOn "writeVersionToAboutFile"
    } else if (theTask.name.equals("askForPasswords")) {
        theTask.dependsOn "writeVersionToAboutFile"
    }
}

apply plugin: 'com.github.ben-manes.versions'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
    }
}