import java.text.SimpleDateFormat
import groovy.swing.SwingBuilder
System.setProperty('java.awt.headless', 'false')

apply plugin: 'com.android.application'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 6
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    defaultConfig {
        applicationId "net.cryptodirect.authenticator"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}+" +
                String.format("%03d", versionBuild)
        buildConfigField 'String', 'BUILD_TIME', "\"${buildTime()}\""
        buildConfigField 'String', 'GIT_SHA', "\"${gitSha()}\""
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    signingConfigs {
        release {
            // We can leave these in environment variables
            storeFile file('C:/key/android/cryptodash.jks')
            keyAlias 'cryptodash'

            // These two lines make gradle believe that the signingConfigs
            // section is complete. Without them, tasks like installRelease
            // will not be available!
            storePassword "notYourRealPassword"
            keyPassword "notYourRealPassword"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            //shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.support:support-v13:26.1.0'
    compile 'me.dm7.barcodescanner:zxing:1.9.8'
    compile 'ch.acra:acra:4.9.2'
    compile 'me.grantland:autofittextview:0.2.1'
    testCompile 'junit:junit:4.12'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker:1.4'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker-dx:1.4'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker-mockito:1.4'
    androidTestCompile 'com.android.support.test:runner:1.0.1'
    androidTestCompile 'com.android.support:support-annotations:26.1.0'
    androidTestCompile 'com.android.support.test:rules:1.0.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:3.0.1'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

static def gitSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

static def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

static def replacePatternInFile(file, Closure replaceText) {
    file.write(replaceText(file.text))
}

task askForPasswords << {
    def console = System.console()
    def storePw
    def keyPw

    // See: https://stackoverflow.com/questions/42222630/get-input-from-user-on-gradle-build-in-android-studio/42225803#42225803
    if (console) {
        // Must create String because System.readPassword() returns char[]
        // (and assigning that below fails silently)
        storePw = new String(console.readPassword("\nKeystore password: "))
        keyPw = new String(console.readPassword("Key password: "))
    } else {
        // Gradle is running as a daemon - prompt user to enter passwords via popup UI
        new SwingBuilder().edt {
            dialog(modal: true, title: 'Enter credentials', alwaysOnTop: true, resizable: false,
                    locationRelativeTo: null, pack: true, show: true
            ) {
                vbox {
                    label(text: "Keystore passphrase:")
                    textField id: "storeText", input = passwordField()
                    label(text: "Key passphrase:")
                    textField id: "keyText", input = passwordField()
                    button(defaultButton: true, text: 'OK', actionPerformed: {
                        storePw = storeText.text
                        keyPw = keyText.text
                        dispose()
                    })
                }
            }
        }
    }

    android.signingConfigs.release.storePassword = storePw
    android.signingConfigs.release.keyPassword = keyPw
}

task writeVersionToAboutFile << {
    def file = new File('.\\app\\src\\main\\assets\\about.html')

    def patternToFind = ~/Version \d.\d.\d\+\d\d\d/
    def replacePatternWith = 'Version ' + versionMajor + "." + versionMinor + "." + versionPatch +
            "+" + String.format("%03d", versionBuild)

    replacePatternInFile(file){
        it.replaceAll(patternToFind, replacePatternWith)
    }
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name == "packageRelease" || theTask.name == "assembleRelease") {
        theTask.dependsOn "askForPasswords"
    }
    if (theTask.name == "mergeReleaseResources") {
        theTask.dependsOn "writeVersionToAboutFile"
    }
}

apply plugin: 'com.github.ben-manes.versions'

buildscript {

    repositories {
        jcenter()
        maven {
            url "https://maven.google.com"
        }
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
    }
}